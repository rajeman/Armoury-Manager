{"version":3,"sources":["../../server/crud/db-query.js"],"names":["connectionString","process","env","DATABASE_URL","current_env","TEST_DATABASE_URL","eventsTable","createEvent","Promise","resolve","reject","insertTime","Date","getTime","client","Client","connect","then","sql","params","item","userId","rankId","gunId","timestamp","action","query","result","rowCount","end","catch","e","clearTable","tableName"],"mappings":";;;;;;;AAAA;;AAEA,IAAIA,mBAAmBC,QAAQC,GAAR,CAAYC,YAAZ,IAA4B,2CAAnD;;AAGA,IAAIF,QAAQC,GAAR,CAAYE,WAAZ,KAA4B,MAAhC,EAAwC;AACtCJ,qBAAmBC,QAAQC,GAAR,CAAYG,iBAAZ,IAAiC,gDAApD;AACD;AACD;AACA,IAAMC,cAAc,QAApB;;AAGA,IAAMC,cAAc,SAAdA,WAAc;AAAA,SAAQ,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC3D,QAAMC,aAAc,IAAIC,IAAJ,EAAD,CAAaC,OAAb,EAAnB;AACA,QAAMC,SAAS,IAAIC,UAAJ,CAAWf,gBAAX,CAAf;AACAc,WAAOE,OAAP,GACGC,IADH,CACQ,YAAM;AACV,UAAMC,uBAAqBZ,WAArB,2GAAN;AACA,UAAMa,SAAS,CAACC,KAAKC,MAAN,EAAcD,KAAKE,MAAnB,EAA2BF,KAAKG,KAAhC,EACbH,KAAKI,SADQ,EACGJ,KAAKK,MADR,EACgBd,UADhB,CAAf;AAEAG,aAAOY,KAAP,CAAaR,GAAb,EAAkBC,MAAlB,EACGF,IADH,CACQ,UAACU,MAAD,EAAY;AAChB;AACAlB,gBAAQkB,OAAOC,QAAf;AACAd,eAAOe,GAAP;AACD,OALH,EAMGC,KANH,CAMS,UAACC,CAAD,EAAO;AACZrB,eAAOqB,CAAP;AACD,OARH;AASD,KAdH,EAcKD,KAdL,CAcW,UAACC,CAAD,EAAO;AACdrB,aAAOqB,CAAP;AACD,KAhBH;AAiBD,GApB2B,CAAR;AAAA,CAApB;;AAuBA,IAAMC,aAAa,SAAbA,UAAa;AAAA,SAAa,IAAIxB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC/D,QAAMI,SAAS,IAAIC,UAAJ,CAAWf,gBAAX,CAAf;AACAc,WAAOE,OAAP,GACGC,IADH,CACQ,YAAM;AACV,UAAIC,uBAAqBe,SAArB,MAAJ;AACA,UAAIA,cAAc,EAAlB,EAAsB;AACpBf,+BAAqBe,SAArB;AACD;AACDnB,aAAOY,KAAP,CAAaR,GAAb,EACGD,IADH,CACQ,UAACU,MAAD,EAAY;AAChBlB,gBAAQkB,OAAOC,QAAf;AACAd,eAAOe,GAAP;AACD,OAJH,EAKGC,KALH,CAKS;AAAA,eAAKpB,OAAOqB,CAAP,CAAL;AAAA,OALT;AAMD,KAZH,EAYKD,KAZL,CAYW;AAAA,aAAKpB,OAAOqB,CAAP,CAAL;AAAA,KAZX;AAaD,GAf+B,CAAb;AAAA,CAAnB;;QAmBExB,W,GAAAA,W;QAAayB,U,GAAAA,U;;AAIf;AACA;;AAEA","file":"db-query.js","sourcesContent":["import { Client } from 'pg';\r\n\r\nlet connectionString = process.env.DATABASE_URL || 'postgres://localhost:5432/armoury_manager';\r\n\r\n\r\nif (process.env.current_env === 'test') {\r\n  connectionString = process.env.TEST_DATABASE_URL || 'postgres://localhost:5432/armoury_manager_test';\r\n}\r\n// const usersTable = 'users';\r\nconst eventsTable = 'events';\r\n\r\n\r\nconst createEvent = item => new Promise((resolve, reject) => {\r\n  const insertTime = (new Date()).getTime();\r\n  const client = new Client(connectionString);\r\n  client.connect()\r\n    .then(() => {\r\n      const sql = `INSERT INTO ${eventsTable} (user_id, rank_id, gun_id, event_timestamp, action, insert_timsetamp) VALUES ($1, $2, $3, $4, $5, $6)`;\r\n      const params = [item.userId, item.rankId, item.gunId,\r\n        item.timestamp, item.action, insertTime];\r\n      client.query(sql, params)\r\n        .then((result) => {\r\n          // console.log(result.rows);\r\n          resolve(result.rowCount);\r\n          client.end();\r\n        })\r\n        .catch((e) => {\r\n          reject(e);\r\n        });\r\n    }).catch((e) => {\r\n      reject(e);\r\n    });\r\n});\r\n\r\n\r\nconst clearTable = tableName => new Promise((resolve, reject) => {\r\n  const client = new Client(connectionString);\r\n  client.connect()\r\n    .then(() => {\r\n      let sql = `DELETE FROM ${tableName};`;\r\n      if (tableName === '') {\r\n        sql = `DELETE FROM ${tableName} WHERE user_level != 2;`;\r\n      }\r\n      client.query(sql)\r\n        .then((result) => {\r\n          resolve(result.rowCount);\r\n          client.end();\r\n        })\r\n        .catch(e => reject(e));\r\n    }).catch(e => reject(e));\r\n});\r\n\r\n\r\nexport {\r\n  createEvent, clearTable,\r\n};\r\n\r\n\r\n// CREATE TABLE users(user_id serial PRIMARY KEY, user_name text NOT NULL,\r\n// user_email text UNIQUE NOT NULL, user_password text NOT NULL);\r\n\r\n// const client = new Client({ connectionString, ssl: true });\r\n"]}