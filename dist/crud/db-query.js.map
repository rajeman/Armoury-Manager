{"version":3,"sources":["../../server/crud/db-query.js"],"names":["connectionString","process","env","DATABASE_URL","current_env","TEST_DATABASE_URL","eventsTable","createEvent","Promise","resolve","reject","insertTime","Date","now","client","Client","connect","then","sql","params","item","userId","rankId","gunId","timestamp","action","query","result","rowCount","end","catch","e","getEvents","rows"],"mappings":";;;;;;;AAAA;;AAEA,IAAIA,mBAAmBC,QAAQC,GAAR,CAAYC,YAAnC;;AAGA,IAAIF,QAAQC,GAAR,CAAYE,WAAZ,KAA4B,MAAhC,EAAwC;AACtCJ,qBAAmBC,QAAQC,GAAR,CAAYG,iBAA/B;AACD;AACD;AACA,IAAMC,cAAc,QAApB;;AAGA,IAAMC,cAAc,SAAdA,WAAc;AAAA,SAAQ,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAC3D,QAAMC,aAAaC,KAAKC,GAAL,KAAa,IAAb,GAAoB,CAAvC,CAD2D,CACjB;AAC1C,QAAMC,SAAS,IAAIC,UAAJ,CAAWf,gBAAX,CAAf;AACAc,WAAOE,OAAP,GACGC,IADH,CACQ,YAAM;AACV,UAAMC,uBAAqBZ,WAArB,2GAAN;AACA,UAAMa,SAAS,CAACC,KAAKC,MAAN,EAAcD,KAAKE,MAAnB,EAA2BF,KAAKG,KAAhC,EACbH,KAAKI,SADQ,EACGJ,KAAKK,MADR,EACgBd,UADhB,CAAf;AAEAG,aAAOY,KAAP,CAAaR,GAAb,EAAkBC,MAAlB,EACGF,IADH,CACQ,UAACU,MAAD,EAAY;AAChB;AACAlB,gBAAQkB,OAAOC,QAAf;AACAd,eAAOe,GAAP;AACD,OALH,EAMGC,KANH,CAMS,UAACC,CAAD,EAAO;AACZrB,eAAOqB,CAAP;AACD,OARH;AASD,KAdH,EAcKD,KAdL,CAcW,UAACC,CAAD,EAAO;AACdrB,aAAOqB,CAAP;AACD,KAhBH;AAiBD,GApB2B,CAAR;AAAA,CAApB;;AAsBA,IAAMC,YAAY,SAAZA,SAAY;AAAA,SAAM,IAAIxB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACvD,QAAMI,SAAS,IAAIC,UAAJ,CAAWf,gBAAX,CAAf;AACAc,WAAOE,OAAP,GACGC,IADH,CACQ,YAAM;AACV,UAAMC,yBAAuBZ,WAAvB,mCAAN;AACAQ,aAAOY,KAAP,CAAaR,GAAb,EACGD,IADH,CACQ,UAACU,MAAD,EAAY;AAChBlB,gBAAQkB,OAAOM,IAAf;AACAnB,eAAOe,GAAP;AACD,OAJH,EAKGC,KALH,CAKS;AAAA,eAAKpB,OAAOqB,CAAP,CAAL;AAAA,OALT;AAMD,KATH,EASKD,KATL,CASW;AAAA,aAAKpB,OAAOqB,CAAP,CAAL;AAAA,KATX;AAUD,GAZuB,CAAN;AAAA,CAAlB;;QAcSxB,W,GAAAA,W;QAAayB,S,GAAAA,S;;AAGtB;AACA;;AAEA","file":"db-query.js","sourcesContent":["import { Client } from 'pg';\n\nlet connectionString = process.env.DATABASE_URL;\n\n\nif (process.env.current_env === 'test') {\n  connectionString = process.env.TEST_DATABASE_URL;\n}\n// const usersTable = 'users';\nconst eventsTable = 'events';\n\n\nconst createEvent = item => new Promise((resolve, reject) => {\n  const insertTime = Date.now() / 1000 | 0; // eslint-disable-line no-bitwise\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      const sql = `INSERT INTO ${eventsTable} (user_id, rank_id, gun_id, event_timestamp, action, insert_timestamp) VALUES ($1, $2, $3, $4, $5, $6)`;\n      const params = [item.userId, item.rankId, item.gunId,\n        item.timestamp, item.action, insertTime];\n      client.query(sql, params)\n        .then((result) => {\n          // console.log(result.rows);\n          resolve(result.rowCount);\n          client.end();\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    }).catch((e) => {\n      reject(e);\n    });\n});\n\nconst getEvents = () => new Promise((resolve, reject) => {\n  const client = new Client(connectionString);\n  client.connect()\n    .then(() => {\n      const sql = `SELECT * FROM ${eventsTable} ORDER BY event_timestamp DESC`;\n      client.query(sql)\n        .then((result) => {\n          resolve(result.rows);\n          client.end();\n        })\n        .catch(e => reject(e));\n    }).catch(e => reject(e));\n});\n\nexport { createEvent, getEvents };\n\n\n// CREATE TABLE users(user_id serial PRIMARY KEY, user_name text NOT NULL,\n// user_email text UNIQUE NOT NULL, user_password text NOT NULL);\n\n// const client = new Client({ connectionString, ssl: true });\n"]}