{"version":3,"sources":["../../server/test/events.test.js"],"names":["integerError","describe","it","app","post","send","set","expect","then","response","body","error","toContain","userId","rankId","gunId","timestamp"],"mappings":"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","file":"events.test.js","sourcesContent":["import expect from 'expect';\nimport request from 'supertest';\nimport app from '../app';\n\nconst integerError = 'must be a positive integer';\ndescribe('POST /events', () => {\n  it('should return userId error with empty body request', () => request(app)\n    .post('/api/v1/events')\n    .send({\n    })\n    .set('Accept', 'application/json')\n    .expect(400)\n    .then((response) => {\n      expect(response.body.error).toContain('userId');\n      expect(response.body.error).toContain(integerError);\n    }));\n  it('should return userId error with non-integer userId', () => request(app)\n    .post('/api/v1/events')\n    .send({\n      userId: 'gh',\n    })\n    .set('Accept', 'application/json')\n    .expect(400)\n    .then((response) => {\n      expect(response.body.error).toContain('userId');\n      expect(response.body.error).toContain(integerError);\n    }));\n\n  it('should return rankId error with non-integer rankId', () => request(app)\n    .post('/api/v1/events')\n    .send({\n      userId: '18',\n      rankId: 'li',\n    })\n    .set('Accept', 'application/json')\n    .expect(400)\n    .then((response) => {\n      expect(response.body.error).toContain('rankId');\n      expect(response.body.error).toContain(integerError);\n    }));\n\n  it('should return gunId error with non-integer gunId', () => request(app)\n    .post('/api/v1/events')\n    .send({\n      userId: '18',\n      rankId: '10',\n      gunId: 'it',\n    })\n    .set('Accept', 'application/json')\n    .expect(400)\n    .then((response) => {\n      expect(response.body.error).toContain('gunId');\n      expect(response.body.error).toContain(integerError);\n    }));\n\n  it('should return timestamp error with non-integer timestamp', () => request(app)\n    .post('/api/v1/events')\n    .send({\n      userId: '18',\n      rankId: '10',\n      gunId: '2',\n      timestamp: 'none',\n    })\n    .set('Accept', 'application/json')\n    .expect(400)\n    .then((response) => {\n      expect(response.body.error).toContain('timestamp');\n      expect(response.body.error).toContain(integerError);\n    }));\n\n  it('should return action error with non-integer action', () => request(app)\n    .post('/api/v1/events')\n    .send({\n      userId: '18',\n      rankId: '10',\n      gunId: '2',\n      timestamp: '161234567',\n    })\n    .set('Accept', 'application/json')\n    .expect(400)\n    .then((response) => {\n      expect(response.body.error).toContain('action');\n      expect(response.body.error).toContain(integerError);\n    }));\n});\n"]}